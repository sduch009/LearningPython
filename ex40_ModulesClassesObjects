Ex40: Modules, Classes, and Objects
#You know how a dictionary is created and used and that it is a way to map one thing
#to another.  That means if you have a dictionary witha  key "apple" and you want to get it
#when you do this:

# mystuff = {'apple': "I AM APPLES!"}
# print(mystuff['apple'])

#Keep this idea of "get X from Y" in your head, and now think about modules.
#You've made a few so far, and you should know that they are:
# 1. A python file with some functions or variables in it...
# 2. Which you can import...
# 3. And access the functions or variables of with the. (dot) operator.

#imagine I hav a module that I decide to name "mystuff.py" and I put a function in it called apple.
#Here's the module "mysutff.py" :

# #this goes in mystuff.py
# def apple():
    #print("I AM APPLES")

#Once I ahve this code, I can use the module MyStuff with "import" and then access the
# 'apple' function:
# import mystuff
# mystuff.apple()

#I could also put a variable in it named 'tangerine':

# def apple():
    #print("I AM APPLES!")

# this is just a variable
#tangerine = "Living reflection of a dream"

#I can access that the same way:
# import mystuff

#mystuff.apple()
#print(mystuff.tangerine)

#Refer back to the dictionary, and you should start to see how this is similar to using a dictionary,
#but the syntax is different, lets compare:

# mystuff['apple'] # get apple from dict
# mystuff.apple() # get apple from the module
# mystuff.tangerine # get tangerine from the module

#This means that we have a VERY common pattern in Python:
#1. Take a key = value style container
#2. Get something out of it by the key's name.

#Classes are like Modules
# A class is a way to take a grouping of fcts and data and place them inside a container
# so you can access them with the . (dot) operator.

#If I were to create a class just like the mystuff module, I'd do something liek this:

# class MyStuff(object):
    #def _init_(self):
        #self.tangerine = "And now a thousand years between"

   #def apple(self):
        #print("I AM CLASSY APPLES!")

#Objects are like Import
#You instantiate (create) a class by calling the class like it's a function, like this:
#   thing = MyStuff()
#   thing.apple()
#   print(thing.tangerine)
#the first line is the "instantiate' operation, and it's a lot like calling a function.
# 1. Python looks for MyStuff() and sees that it is a class you've defined.
# 2. Python crafts and empty object with all the functions you've specified in the class using def
# 3. Python then looks to see if you made a "magic" _init_ function, and if you ahve it calls that fct to initialize your newly created empty object.
# 4. In the MyStuff fct _init_ you then get this extra variable, self, which is that empty object Python made for you, and you can
#set variables on it just like you would with a module, dictionary or other object.
# 5. In this case, you set self.tangerin to a song lyric and then you've initialized this object.
# 6. Now Python can take this newly minted object and assign it to the thing varaible for you to work with

#TBH:
#Classes are like blueprints or definitions for creating new mini-modules.
#Instantiation is how you make one of these mini-mofules AND import it at the same time.  "instantiate just means to create and object from the classe
#The resulting created mini-module is called an object, and you then assign it to a variable to work with it.

#Now I have 3 ways of getting things from things:
# dict style
mystuff['apples']

#module style
mystuff.apples()
print(mystuff.tangerine)

#class style
thing = MyStuff()
thing.apples()
print(thing.tangerine)
